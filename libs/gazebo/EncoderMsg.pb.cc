// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EncoderMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EncoderMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {
class EncoderMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EncoderMsg> {
} _EncoderMsg_default_instance_;

namespace protobuf_EncoderMsg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncoderMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncoderMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncoderMsg, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncoderMsg, left_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncoderMsg, right_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncoderMsg, left_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncoderMsg, right_velocity_),
  0,
  1,
  2,
  3,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(EncoderMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_EncoderMsg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "EncoderMsg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _EncoderMsg_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _EncoderMsg_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020EncoderMsg.proto\022\013gazebo.msgs\"w\n\nEncod"
      "erMsg\022\021\n\ttimestamp\030\001 \002(\002\022\022\n\nleft_angle\030\002"
      " \002(\002\022\023\n\013right_angle\030\003 \002(\002\022\025\n\rleft_veloci"
      "ty\030\004 \002(\002\022\026\n\016right_velocity\030\005 \002(\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EncoderMsg.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_EncoderMsg_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncoderMsg::kTimestampFieldNumber;
const int EncoderMsg::kLeftAngleFieldNumber;
const int EncoderMsg::kRightAngleFieldNumber;
const int EncoderMsg::kLeftVelocityFieldNumber;
const int EncoderMsg::kRightVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncoderMsg::EncoderMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EncoderMsg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gazebo.msgs.EncoderMsg)
}
EncoderMsg::EncoderMsg(const EncoderMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&right_velocity_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(right_velocity_));
  // @@protoc_insertion_point(copy_constructor:gazebo.msgs.EncoderMsg)
}

void EncoderMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&right_velocity_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(right_velocity_));
}

EncoderMsg::~EncoderMsg() {
  // @@protoc_insertion_point(destructor:gazebo.msgs.EncoderMsg)
  SharedDtor();
}

void EncoderMsg::SharedDtor() {
}

void EncoderMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncoderMsg::descriptor() {
  protobuf_EncoderMsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_EncoderMsg_2eproto::file_level_metadata[0].descriptor;
}

const EncoderMsg& EncoderMsg::default_instance() {
  protobuf_EncoderMsg_2eproto::InitDefaults();
  return *internal_default_instance();
}

EncoderMsg* EncoderMsg::New(::google::protobuf::Arena* arena) const {
  EncoderMsg* n = new EncoderMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EncoderMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:gazebo.msgs.EncoderMsg)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&right_velocity_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(right_velocity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EncoderMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gazebo.msgs.EncoderMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float timestamp = 1;
      case 1: {
        if (tag == 13u) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float left_angle = 2;
      case 2: {
        if (tag == 21u) {
          set_has_left_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float right_angle = 3;
      case 3: {
        if (tag == 29u) {
          set_has_right_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float left_velocity = 4;
      case 4: {
        if (tag == 37u) {
          set_has_left_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float right_velocity = 5;
      case 5: {
        if (tag == 45u) {
          set_has_right_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gazebo.msgs.EncoderMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gazebo.msgs.EncoderMsg)
  return false;
#undef DO_
}

void EncoderMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gazebo.msgs.EncoderMsg)
  // required float timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->timestamp(), output);
  }

  // required float left_angle = 2;
  if (has_left_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->left_angle(), output);
  }

  // required float right_angle = 3;
  if (has_right_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->right_angle(), output);
  }

  // required float left_velocity = 4;
  if (has_left_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->left_velocity(), output);
  }

  // required float right_velocity = 5;
  if (has_right_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->right_velocity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gazebo.msgs.EncoderMsg)
}

::google::protobuf::uint8* EncoderMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gazebo.msgs.EncoderMsg)
  // required float timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->timestamp(), target);
  }

  // required float left_angle = 2;
  if (has_left_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->left_angle(), target);
  }

  // required float right_angle = 3;
  if (has_right_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->right_angle(), target);
  }

  // required float left_velocity = 4;
  if (has_left_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->left_velocity(), target);
  }

  // required float right_velocity = 5;
  if (has_right_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->right_velocity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gazebo.msgs.EncoderMsg)
  return target;
}

size_t EncoderMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gazebo.msgs.EncoderMsg)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required float timestamp = 1;
    total_size += 1 + 4;
  }

  if (has_left_angle()) {
    // required float left_angle = 2;
    total_size += 1 + 4;
  }

  if (has_right_angle()) {
    // required float right_angle = 3;
    total_size += 1 + 4;
  }

  if (has_left_velocity()) {
    // required float left_velocity = 4;
    total_size += 1 + 4;
  }

  if (has_right_velocity()) {
    // required float right_velocity = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t EncoderMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gazebo.msgs.EncoderMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required float timestamp = 1;
    total_size += 1 + 4;

    // required float left_angle = 2;
    total_size += 1 + 4;

    // required float right_angle = 3;
    total_size += 1 + 4;

    // required float left_velocity = 4;
    total_size += 1 + 4;

    // required float right_velocity = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncoderMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gazebo.msgs.EncoderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const EncoderMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EncoderMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gazebo.msgs.EncoderMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gazebo.msgs.EncoderMsg)
    MergeFrom(*source);
  }
}

void EncoderMsg::MergeFrom(const EncoderMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gazebo.msgs.EncoderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_left_angle()) {
      set_left_angle(from.left_angle());
    }
    if (from.has_right_angle()) {
      set_right_angle(from.right_angle());
    }
    if (from.has_left_velocity()) {
      set_left_velocity(from.left_velocity());
    }
    if (from.has_right_velocity()) {
      set_right_velocity(from.right_velocity());
    }
  }
}

void EncoderMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gazebo.msgs.EncoderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncoderMsg::CopyFrom(const EncoderMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gazebo.msgs.EncoderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncoderMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void EncoderMsg::Swap(EncoderMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncoderMsg::InternalSwap(EncoderMsg* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(left_angle_, other->left_angle_);
  std::swap(right_angle_, other->right_angle_);
  std::swap(left_velocity_, other->left_velocity_);
  std::swap(right_velocity_, other->right_velocity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EncoderMsg::GetMetadata() const {
  protobuf_EncoderMsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_EncoderMsg_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EncoderMsg

// required float timestamp = 1;
bool EncoderMsg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EncoderMsg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void EncoderMsg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void EncoderMsg::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
float EncoderMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.EncoderMsg.timestamp)
  return timestamp_;
}
void EncoderMsg::set_timestamp(float value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.EncoderMsg.timestamp)
}

// required float left_angle = 2;
bool EncoderMsg::has_left_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EncoderMsg::set_has_left_angle() {
  _has_bits_[0] |= 0x00000002u;
}
void EncoderMsg::clear_has_left_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
void EncoderMsg::clear_left_angle() {
  left_angle_ = 0;
  clear_has_left_angle();
}
float EncoderMsg::left_angle() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.EncoderMsg.left_angle)
  return left_angle_;
}
void EncoderMsg::set_left_angle(float value) {
  set_has_left_angle();
  left_angle_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.EncoderMsg.left_angle)
}

// required float right_angle = 3;
bool EncoderMsg::has_right_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EncoderMsg::set_has_right_angle() {
  _has_bits_[0] |= 0x00000004u;
}
void EncoderMsg::clear_has_right_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
void EncoderMsg::clear_right_angle() {
  right_angle_ = 0;
  clear_has_right_angle();
}
float EncoderMsg::right_angle() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.EncoderMsg.right_angle)
  return right_angle_;
}
void EncoderMsg::set_right_angle(float value) {
  set_has_right_angle();
  right_angle_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.EncoderMsg.right_angle)
}

// required float left_velocity = 4;
bool EncoderMsg::has_left_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EncoderMsg::set_has_left_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
void EncoderMsg::clear_has_left_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
void EncoderMsg::clear_left_velocity() {
  left_velocity_ = 0;
  clear_has_left_velocity();
}
float EncoderMsg::left_velocity() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.EncoderMsg.left_velocity)
  return left_velocity_;
}
void EncoderMsg::set_left_velocity(float value) {
  set_has_left_velocity();
  left_velocity_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.EncoderMsg.left_velocity)
}

// required float right_velocity = 5;
bool EncoderMsg::has_right_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EncoderMsg::set_has_right_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
void EncoderMsg::clear_has_right_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
void EncoderMsg::clear_right_velocity() {
  right_velocity_ = 0;
  clear_has_right_velocity();
}
float EncoderMsg::right_velocity() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.EncoderMsg.right_velocity)
  return right_velocity_;
}
void EncoderMsg::set_right_velocity(float value) {
  set_has_right_velocity();
  right_velocity_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.EncoderMsg.right_velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)
