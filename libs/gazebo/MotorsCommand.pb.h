// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MotorsCommand.proto

#ifndef PROTOBUF_MotorsCommand_2eproto__INCLUDED
#define PROTOBUF_MotorsCommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace gazebo {
namespace msgs {
class MotorsCommand;
class MotorsCommandDefaultTypeInternal;
extern MotorsCommandDefaultTypeInternal _MotorsCommand_default_instance_;
}  // namespace msgs
}  // namespace gazebo

namespace gazebo {
namespace msgs {

namespace protobuf_MotorsCommand_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_MotorsCommand_2eproto

// ===================================================================

class MotorsCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.MotorsCommand) */ {
 public:
  MotorsCommand();
  virtual ~MotorsCommand();

  MotorsCommand(const MotorsCommand& from);

  inline MotorsCommand& operator=(const MotorsCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotorsCommand& default_instance();

  static inline const MotorsCommand* internal_default_instance() {
    return reinterpret_cast<const MotorsCommand*>(
               &_MotorsCommand_default_instance_);
  }

  void Swap(MotorsCommand* other);

  // implements Message ----------------------------------------------

  inline MotorsCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  MotorsCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MotorsCommand& from);
  void MergeFrom(const MotorsCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MotorsCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float left_torque = 1;
  bool has_left_torque() const;
  void clear_left_torque();
  static const int kLeftTorqueFieldNumber = 1;
  float left_torque() const;
  void set_left_torque(float value);

  // required float right_torque = 2;
  bool has_right_torque() const;
  void clear_right_torque();
  static const int kRightTorqueFieldNumber = 2;
  float right_torque() const;
  void set_right_torque(float value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.MotorsCommand)
 private:
  void set_has_left_torque();
  void clear_has_left_torque();
  void set_has_right_torque();
  void clear_has_right_torque();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float left_torque_;
  float right_torque_;
  friend struct  protobuf_MotorsCommand_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MotorsCommand

// required float left_torque = 1;
inline bool MotorsCommand::has_left_torque() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotorsCommand::set_has_left_torque() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotorsCommand::clear_has_left_torque() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotorsCommand::clear_left_torque() {
  left_torque_ = 0;
  clear_has_left_torque();
}
inline float MotorsCommand::left_torque() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.MotorsCommand.left_torque)
  return left_torque_;
}
inline void MotorsCommand::set_left_torque(float value) {
  set_has_left_torque();
  left_torque_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.MotorsCommand.left_torque)
}

// required float right_torque = 2;
inline bool MotorsCommand::has_right_torque() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotorsCommand::set_has_right_torque() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotorsCommand::clear_has_right_torque() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotorsCommand::clear_right_torque() {
  right_torque_ = 0;
  clear_has_right_torque();
}
inline float MotorsCommand::right_torque() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.MotorsCommand.right_torque)
  return right_torque_;
}
inline void MotorsCommand::set_right_torque(float value) {
  set_has_right_torque();
  right_torque_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.MotorsCommand.right_torque)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace msgs
}  // namespace gazebo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MotorsCommand_2eproto__INCLUDED
